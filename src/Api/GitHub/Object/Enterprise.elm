-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.GitHub.Object.Enterprise exposing (..)

import Api.GitHub.Enum.EnterpriseUserAccountMembershipRole
import Api.GitHub.Enum.EnterpriseUserDeployment
import Api.GitHub.InputObject
import Api.GitHub.Interface
import Api.GitHub.Object
import Api.GitHub.Scalar
import Api.GitHub.ScalarCodecs
import Api.GitHub.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias AvatarUrlOptionalArguments =
    { size : OptionalArgument Int }


{-| A URL pointing to the enterprise's public avatar.

  - size - The size of the resulting square image.

-}
avatarUrl : (AvatarUrlOptionalArguments -> AvatarUrlOptionalArguments) -> SelectionSet Api.GitHub.ScalarCodecs.Uri Api.GitHub.Object.Enterprise
avatarUrl fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { size = Absent }

        optionalArgs =
            [ Argument.optional "size" filledInOptionals.size Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForField "ScalarCodecs.Uri" "avatarUrl" optionalArgs (Api.GitHub.ScalarCodecs.codecs |> Api.GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Enterprise billing informationÂ visible to enterprise billing managers.
-}
billingInfo : SelectionSet decodesTo Api.GitHub.Object.EnterpriseBillingInfo -> SelectionSet (Maybe decodesTo) Api.GitHub.Object.Enterprise
billingInfo object_ =
    Object.selectionForCompositeField "billingInfo" [] object_ (identity >> Decode.nullable)


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Api.GitHub.ScalarCodecs.DateTime Api.GitHub.Object.Enterprise
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Api.GitHub.ScalarCodecs.codecs |> Api.GitHub.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) Api.GitHub.Object.Enterprise
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


{-| The description of the enterprise.
-}
description : SelectionSet (Maybe String) Api.GitHub.Object.Enterprise
description =
    Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


{-| The description of the enterprise as HTML.
-}
descriptionHTML : SelectionSet Api.GitHub.ScalarCodecs.Html Api.GitHub.Object.Enterprise
descriptionHTML =
    Object.selectionForField "ScalarCodecs.Html" "descriptionHTML" [] (Api.GitHub.ScalarCodecs.codecs |> Api.GitHub.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


id : SelectionSet Api.GitHub.ScalarCodecs.Id Api.GitHub.Object.Enterprise
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.GitHub.ScalarCodecs.codecs |> Api.GitHub.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The location of the enterprise.
-}
location : SelectionSet (Maybe String) Api.GitHub.Object.Enterprise
location =
    Object.selectionForField "(Maybe String)" "location" [] (Decode.string |> Decode.nullable)


type alias MembersOptionalArguments =
    { organizationLogins : OptionalArgument (List String)
    , query : OptionalArgument String
    , orderBy : OptionalArgument Api.GitHub.InputObject.EnterpriseMemberOrder
    , role : OptionalArgument Api.GitHub.Enum.EnterpriseUserAccountMembershipRole.EnterpriseUserAccountMembershipRole
    , deployment : OptionalArgument Api.GitHub.Enum.EnterpriseUserDeployment.EnterpriseUserDeployment
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of users who are members of this enterprise.

  - organizationLogins - Only return members within the organizations with these logins
  - query - The search string to look for.
  - orderBy - Ordering options for members returned from the connection.
  - role - The role of the user in the enterprise organization or server.
  - deployment - Only return members within the selected GitHub Enterprise deployment
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
members : (MembersOptionalArguments -> MembersOptionalArguments) -> SelectionSet decodesTo Api.GitHub.Object.EnterpriseMemberConnection -> SelectionSet decodesTo Api.GitHub.Object.Enterprise
members fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { organizationLogins = Absent, query = Absent, orderBy = Absent, role = Absent, deployment = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "organizationLogins" filledInOptionals.organizationLogins (Encode.string |> Encode.list), Argument.optional "query" filledInOptionals.query Encode.string, Argument.optional "orderBy" filledInOptionals.orderBy Api.GitHub.InputObject.encodeEnterpriseMemberOrder, Argument.optional "role" filledInOptionals.role (Encode.enum Api.GitHub.Enum.EnterpriseUserAccountMembershipRole.toString), Argument.optional "deployment" filledInOptionals.deployment (Encode.enum Api.GitHub.Enum.EnterpriseUserDeployment.toString), Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "members" optionalArgs object_ identity


{-| The name of the enterprise.
-}
name : SelectionSet String Api.GitHub.Object.Enterprise
name =
    Object.selectionForField "String" "name" [] Decode.string


type alias OrganizationsOptionalArguments =
    { query : OptionalArgument String
    , orderBy : OptionalArgument Api.GitHub.InputObject.OrganizationOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of organizations that belong to this enterprise.

  - query - The search string to look for.
  - orderBy - Ordering options for organizations returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
organizations : (OrganizationsOptionalArguments -> OrganizationsOptionalArguments) -> SelectionSet decodesTo Api.GitHub.Object.OrganizationConnection -> SelectionSet decodesTo Api.GitHub.Object.Enterprise
organizations fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { query = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "query" filledInOptionals.query Encode.string, Argument.optional "orderBy" filledInOptionals.orderBy Api.GitHub.InputObject.encodeOrganizationOrder, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "organizations" optionalArgs object_ identity


{-| Enterprise information only visible to enterprise owners.
-}
ownerInfo : SelectionSet decodesTo Api.GitHub.Object.EnterpriseOwnerInfo -> SelectionSet (Maybe decodesTo) Api.GitHub.Object.Enterprise
ownerInfo object_ =
    Object.selectionForCompositeField "ownerInfo" [] object_ (identity >> Decode.nullable)


{-| The HTTP path for this enterprise.
-}
resourcePath : SelectionSet Api.GitHub.ScalarCodecs.Uri Api.GitHub.Object.Enterprise
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (Api.GitHub.ScalarCodecs.codecs |> Api.GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL for this enterprise.
-}
url : SelectionSet Api.GitHub.ScalarCodecs.Uri Api.GitHub.Object.Enterprise
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (Api.GitHub.ScalarCodecs.codecs |> Api.GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias UserAccountsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of user accounts on this enterprise.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
userAccounts : (UserAccountsOptionalArguments -> UserAccountsOptionalArguments) -> SelectionSet decodesTo Api.GitHub.Object.EnterpriseUserAccountConnection -> SelectionSet decodesTo Api.GitHub.Object.Enterprise
userAccounts fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "userAccounts" optionalArgs object_ identity


{-| Is the current viewer an admin of this enterprise?
-}
viewerIsAdmin : SelectionSet Bool Api.GitHub.Object.Enterprise
viewerIsAdmin =
    Object.selectionForField "Bool" "viewerIsAdmin" [] Decode.bool


{-| The URL of the enterprise website.
-}
websiteUrl : SelectionSet (Maybe Api.GitHub.ScalarCodecs.Uri) Api.GitHub.Object.Enterprise
websiteUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "websiteUrl" [] (Api.GitHub.ScalarCodecs.codecs |> Api.GitHub.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)
